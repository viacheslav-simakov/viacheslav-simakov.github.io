#
#	Ограничение небезопасных конструкций
#	https://perldoc.perl.org/strict
use strict;
#
#	Управление необязательными предупреждениями
#	https://perldoc.perl.org/warnings
use warnings;
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#	Создание PDF-отчетов
#
package Tele_PDF {
#
#	Логотип https://sgmu.ru/
#	<svg width="130" height="50" xmlns="http://www.w3.org/2000/svg">
my $SVG_string = <<'SVG';
<svg xmlns="http://www.w3.org/2000/svg">
<path d="M31.711 23.866c0 4.436-1.778 8.47-4.643 11.394C24.203 38.184 20.25 40 15.905 40c-4.096 0-7.842-1.614-10.659-4.25A16.251 16.251 0 01.16 25.265C.159 16.851.056 8.415 0 0h19.108c3.264 0 6.25 1.286 8.495 3.386a12.957 12.957 0 014.06 8.355l.046 12.124.002.002zm-5.343 10.68a15.236 15.236 0 004.354-10.68h.002l-.048-12.04a11.94 11.94 0 00-3.737-7.7c-2.068-1.933-4.82-3.116-7.83-3.116H.991l.152 24.169a15.233 15.233 0 004.767 9.83c2.64 2.469 6.151 3.98 9.993 3.98 4.074 0 7.778-1.702 10.464-4.443z"
fill="#8F1432"/>
<path d="M13.165 10.454h2.752c1.868 0 3.575.738 4.825 1.932 1.287 1.23 2.083 2.932 2.083 4.812 0 1.73-.673 3.307-1.782 4.505a6.615 6.615 0 011.809 4.535v2.241h-4.358v-2.24c0-.617-.263-1.175-.688-1.58a2.616 2.616 0 00-1.472-.691 3.571 3.571 0 01-.184-.03 6.265 6.265 0 01-.233.004h-2.725c0-1.969-.002-3.358-.005-4.481h4.267v-4.449h-4.277v4.449H8.86v-4.449h4.31c-.004-1.133-.006-2.52-.006-4.558zM46.822 14.73c.624-.425 1.425-.64 2.38-.64 1.043 0 1.9.255 2.545.757.65.506 1.12 1.233 1.397 2.16l.12.402 3.96-1.121-.138-.43c-.552-1.716-1.518-3.096-2.87-4.103-1.353-1.008-3.04-1.52-5.014-1.52-1.718 0-3.225.39-4.48 1.16-1.258.771-2.24 1.864-2.918 3.248-.671 1.37-1.011 2.98-1.011 4.782 0 1.804.34 3.413 1.01 4.783.678 1.384 1.66 2.477 2.919 3.249 1.255.769 2.762 1.159 4.48 1.159 1.974 0 3.66-.511 5.014-1.52 1.352-1.007 2.318-2.387 2.87-4.102l.139-.43-3.96-1.122-.12.402c-.279.92-.749 1.645-1.399 2.155-.645.506-1.501.763-2.544.763-.955 0-1.756-.216-2.38-.64-.623-.424-1.1-1.035-1.416-1.814-.328-.808-.494-1.777-.494-2.883 0-1.105.166-2.074.494-2.882.316-.78.793-1.39 1.416-1.814zM60.378 28.265h3.959V14.416h7.642v-3.83H60.378v17.68zM83.224 21.211L78.04 10.586h-3.478v17.68h3.753V19.67l4.093 8.595h1.629l4.093-8.595v8.595h3.753v-17.68h-3.477l-5.183 10.626zM105.738 10.585l-3.586 8.122-3.459-8.122h-4.471l5.828 12.526-2.5 5.154h4.269l8.179-17.68h-4.26zM43.31 33.476v3.135h-.49v-2.31l-1.61 2.31h-.417v-3.135h.489v2.279l1.612-2.279h.416zM44.102 36.611v-3.135h.435l1.166 2.433 1.166-2.433h.435v3.135h-.489v-2.058l-.978 2.058h-.268l-.977-2.058v2.058h-.49zM48.297 35.189v-.415h2.269v.415h-2.27zm1.134 1.51c-.301 0-.564-.069-.789-.206a1.398 1.398 0 01-.524-.571 1.861 1.861 0 01-.188-.858c0-.342.062-.639.185-.89.123-.25.295-.444.515-.58.221-.136.48-.205.779-.205.309 0 .572.073.788.218.218.145.38.352.49.621.109.27.156.59.14.96h-.512v-.185c-.005-.385-.082-.673-.23-.863-.147-.191-.367-.286-.66-.286-.312 0-.55.102-.714.307-.162.206-.244.5-.244.883 0 .37.082.656.244.859.164.203.396.305.698.305.203 0 .379-.048.529-.143a.964.964 0 00.352-.409l.486.171c-.12.277-.299.491-.538.643-.24.152-.51.228-.807.228zM51.456 36.611v-3.135h.506v1.321h1.615v-1.32h.507v3.134h-.507v-1.323h-1.615v1.323h-.506zM57.394 33.476v3.135h-.49v-2.31l-1.61 2.31h-.417v-3.135h.489v2.279l1.612-2.279h.416zM59.839 36.118h1.129a.933.933 0 00.406-.086.689.689 0 00.283-.242.663.663 0 00.104-.377.78.78 0 00-.093-.38.703.703 0 00-.644-.37H59.84v1.455zm0-1.942h1.078c.12 0 .23-.026.328-.08a.602.602 0 00.233-.225.644.644 0 00.087-.34c0-.18-.06-.326-.18-.44a.65.65 0 00-.468-.172h-1.078v1.257zm-.512 2.435v-4.18h1.595c.245 0 .454.052.627.155.174.102.306.237.398.404.092.168.138.348.138.542 0 .226-.057.424-.17.595a.866.866 0 01-.461.35l-.006-.141c.264.071.468.203.615.394.145.192.218.42.218.685 0 .244-.048.455-.146.633a1.016 1.016 0 01-.421.415c-.183.099-.4.148-.65.148h-1.737zM62.767 36.611v-.569h.526v.57h-.526zM67.997 36.611v-3.268l-2.136 3.268h-.512v-4.18h.512v3.266l2.136-3.266h.511v4.18h-.51zM69.395 36.611v-.569h.526v.57h-.526zM72.484 34.576h1.095c.036 0 .076-.002.123-.005a.894.894 0 00.132-.02.652.652 0 00.32-.17.74.74 0 00.18-.29 1.048 1.048 0 000-.683.755.755 0 00-.18-.291.628.628 0 00-.32-.169.64.64 0 00-.132-.021 1.935 1.935 0 00-.123-.005h-1.095v1.654zm-.507 2.035v-4.18h1.618c.04 0 .087.002.142.005.055.003.109.01.16.019.221.035.408.112.558.232.151.12.264.271.34.454.076.183.114.386.114.608 0 .22-.038.423-.115.605-.077.183-.19.335-.341.456a1.16 1.16 0 01-.556.234 2.061 2.061 0 01-.302.023h-1.111v1.544h-.507zM76.427 36.266c.183 0 .34-.034.474-.1a.868.868 0 00.482-.623c.028-.097.044-.205.047-.324.003-.119.004-.21.004-.274l.177.078c-.165.024-.327.046-.486.067-.16.021-.31.044-.453.068-.142.025-.27.053-.384.086a1.219 1.219 0 00-.234.105.526.526 0 00-.176.164.497.497 0 00-.003.492c.042.077.109.14.199.188.09.048.208.073.353.073zm-.076.432a1.17 1.17 0 01-.576-.13.877.877 0 01-.35-.34.937.937 0 01-.118-.465.93.93 0 01.093-.428.836.836 0 01.26-.302c.112-.08.246-.143.401-.19.146-.04.31-.076.49-.106.181-.03.365-.057.55-.082.187-.025.36-.05.52-.073l-.18.108c.005-.279-.05-.485-.164-.619-.115-.133-.313-.2-.593-.2a.909.909 0 00-.488.13.7.7 0 00-.294.419l-.48-.148c.073-.275.216-.49.428-.647.213-.157.493-.236.84-.236.278 0 .517.051.717.153.2.101.344.255.431.46.044.096.071.201.083.315.011.113.016.232.016.355v1.939h-.449v-.752l.106.07a1.285 1.285 0 01-.485.575c-.208.13-.46.194-.758.194zM79.778 36.698a1.58 1.58 0 01-.805-.202 1.473 1.473 0 01-.552-.555l.404-.268c.112.173.245.305.4.397.156.092.333.138.532.138.21 0 .374-.05.498-.147a.479.479 0 00.185-.396c0-.124-.03-.219-.091-.285a.487.487 0 00-.261-.136 1.92 1.92 0 00-.407-.038h-.319v-.426h.316c.199 0 .36-.033.486-.1.125-.065.188-.177.188-.336 0-.162-.059-.28-.175-.355a.755.755 0 00-.416-.112c-.171 0-.335.036-.49.109a1.422 1.422 0 00-.4.274l-.308-.35c.16-.167.343-.296.55-.386.208-.09.434-.135.679-.135.196 0 .377.036.541.106a.834.834 0 01.539.808.86.86 0 01-.114.445c-.076.13-.187.242-.335.34l-.02-.184a.65.65 0 01.311.17c.083.082.144.18.184.292.04.112.06.23.06.351 0 .205-.053.38-.158.527a1.016 1.016 0 01-.425.337 1.471 1.471 0 01-.597.117zM82.01 38.004l.594-1.648.008.487-1.341-3.367h.531l1.052 2.709h-.182l.987-2.709h.515L82.5 38.004h-.491zM84.64 36.611v-3.135h.434l1.166 2.433 1.167-2.433h.434v3.135h-.489v-2.058l-.978 2.058h-.267l-.978-2.058v2.058h-.49zM89.946 36.208c.318 0 .555-.109.71-.325.156-.217.234-.498.234-.842 0-.354-.079-.636-.236-.846-.157-.21-.393-.315-.708-.315-.215 0-.39.05-.53.148a.883.883 0 00-.309.41 1.648 1.648 0 00-.103.603c0 .352.08.635.24.848.159.212.392.319.702.319zm0 .49c-.305 0-.569-.07-.79-.212a1.388 1.388 0 01-.51-.586c-.12-.25-.18-.536-.18-.86 0-.328.062-.616.183-.864.122-.248.293-.44.515-.58.222-.137.482-.207.782-.207.307 0 .571.07.793.21.222.141.392.336.51.584.119.249.178.535.178.858 0 .327-.06.615-.179.863-.12.249-.29.443-.512.584-.222.14-.485.21-.79.21zM92.562 36.19h.916a1.3 1.3 0 00.293-.04.345.345 0 00.214-.163.524.524 0 00.067-.258.443.443 0 00-.102-.302.439.439 0 00-.265-.145.552.552 0 00-.13-.02 3.242 3.242 0 00-.123-.004h-.87v.932zm0-1.358h.762c.053 0 .109-.003.168-.01a.591.591 0 00.153-.037.35.35 0 00.193-.163c.04-.077.06-.16.06-.252a.52.52 0 00-.066-.265.349.349 0 00-.204-.158.626.626 0 00-.203-.04 4.67 4.67 0 00-.144-.004h-.72v.929zm-.512 1.78v-3.136h1.308c.078 0 .161.005.252.014.09.008.171.023.246.045a.754.754 0 01.408.274c.107.138.16.313.16.524 0 .118-.017.22-.052.307a.667.667 0 01-.345.36.605.605 0 01.201.079c.108.06.193.144.255.252a.835.835 0 01.092.415c0 .213-.05.389-.15.527a.765.765 0 01-.415.286 1.215 1.215 0 01-.246.042c-.088.007-.174.01-.258.01H92.05zM96.438 36.698c-.311 0-.575-.07-.792-.213a1.357 1.357 0 01-.497-.588 2.111 2.111 0 01-.176-.853c.004-.327.064-.615.18-.864.117-.248.285-.442.503-.582.218-.139.48-.209.787-.209.325 0 .604.081.838.244.234.163.391.385.47.668l-.5.154a.839.839 0 00-.813-.575.86.86 0 00-.52.15.884.884 0 00-.305.412c-.066.175-.1.376-.102.602.004.348.083.63.237.843.154.214.384.32.69.32.2 0 .368-.046.5-.14a.857.857 0 00.302-.408l.511.137a1.337 1.337 0 01-.497.67 1.407 1.407 0 01-.816.232zM98.331 36.611l.003-3.135h.512v1.51l1.288-1.51h.657l-1.356 1.568 1.515 1.567h-.708l-1.396-1.51v1.51h-.515zM102.486 36.208c.318 0 .556-.109.711-.325.155-.217.233-.498.233-.842 0-.354-.079-.636-.236-.846-.157-.21-.393-.315-.708-.315a.888.888 0 00-.529.148.886.886 0 00-.31.41 1.652 1.652 0 00-.102.603c0 .352.079.635.238.848.16.212.394.319.703.319zm0 .49c-.305 0-.568-.07-.789-.212a1.395 1.395 0 01-.511-.586 1.974 1.974 0 01-.179-.86c0-.328.061-.616.182-.864.122-.248.293-.44.515-.58.222-.137.482-.207.782-.207.307 0 .572.07.794.21.221.141.391.336.51.584.118.249.177.535.177.858 0 .327-.059.615-.179.863-.119.249-.29.443-.512.584-.222.14-.485.21-.79.21zM104.592 36.611v-3.135h2.133v.491h-1.626v2.644h-.507zM108.517 36.208c.318 0 .556-.109.711-.325.155-.217.233-.498.233-.842 0-.354-.078-.636-.236-.846-.157-.21-.393-.315-.708-.315a.888.888 0 00-.529.148.886.886 0 00-.31.41 1.652 1.652 0 00-.102.603c0 .352.079.635.239.848.159.212.393.319.702.319zm0 .49c-.305 0-.569-.07-.789-.212a1.386 1.386 0 01-.51-.586 1.96 1.96 0 01-.18-.86c0-.328.061-.616.183-.864.121-.248.292-.44.514-.58a1.45 1.45 0 01.782-.207c.307 0 .572.07.793.21.222.141.392.336.511.584.118.249.178.535.178.858 0 .327-.06.615-.18.863-.119.249-.29.443-.511.584-.222.14-.485.21-.791.21z"
fill="#8F1432"/>
</svg>
SVG
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
#	База данных
use Tele_DB();
#
#	Создание, изменение и проверка PDF-файлов
#	https://metacpan.org/pod/PDF::API2
use PDF::API2;
#
#	Служебный класс для построения макетов таблиц
#	https://metacpan.org/pod/PDF::Table
use PDF::Table;
#
#	Создание PDF XObject из данных SVG
#	https://metacpan.org/pod/SVGPDF
#	https://github.com/sciurius/perl-SVGPDF/blob/main/examples/sample.pl
use SVGPDF;
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Конструктор
	---
	$obj = Tele_PDF->new(\%user, \%web_app_data);

		%user			- данные пользователя
		%web_app_data	- данные HTML-формы
=cut
sub new {
	#	название класса
	my	$class = shift @_;
	#	данные пользователя
	my	$user = shift @_;
	#	база данных
	my	$db = Tele_DB->new( shift @_ );
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	Создаем PDF
	my	$pdf = PDF::API2->new();
	#
	#	Размер страницы по умолчанию
		$pdf->default_page_size('A4');
	#
	#	Размеры страницы (pt)
	my	($page_width, $page_height) = ($pdf->default_page_size)[2,3];
	#
	#	Устанавливаем шрифты с кириллицей
#	my	$font = $pdf->font('times.ttf');
#	my	$font = font_ttf($pdf, 'font/OpenSans-Regular.ttf');
	my	$font = _font_ttf($pdf, 'font/Roboto-Regular.ttf');
	#
	#	жирный шрифт
	my	$font_bold = _font_ttf($pdf, 'font/Roboto-Bold.ttf');
	#
	#	курсивный шрифт
	my	$font_italic = _font_ttf($pdf, 'font/Roboto-Italic.ttf');
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	данные объекта
	my	$self =
		{
			-DB				=> $db,				# база данных
			-user			=> $user,			# пользователь
			-pdf			=> $pdf,			# pdf-документ
			-font			=> $font,			# шрифт
			-font_bold		=> $font_bold,		# жирный шрифт
			-font_italic	=> $font_italic,	# курсивный шрифт
			-page_width		=> $page_width,		# ширина страницы
			-page_height	=> $page_height,	# высота страницы
			-page_margin	=>					# отступы от края страницы
			{
				-left		=> 72,
				-right		=> 36,
				-top		=> 60,
				-bottom		=> 36,
			},
			-skip_y			=> 36,				# смещение к низу странице
			-current_y		=> undef,			# отступ от верхнего края
		};
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	привести ссылку к типу __PACKAGE__
	return bless($self, $class);
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Установка шрифта из файла *.ttf
	---
	$font = _font_ttf($pdf, $file_font);
	
		$pdf		- PDF-документ
		$file_font	- файл шрифта (*.ttf)
		$font		- шрифт
=cut
sub _font_ttf
{
	#	PDF-документ
	my	$pdf = shift @_;
	#	файл шрифта (*.ttf)
	my	$file_font = shift @_;
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	шрифт по умолчанию
	my	$font = $pdf->font('times.ttf');
	#
	#	Проверка существования файла
	unless (-e $file_font)
	{
		#	Предупреждение!
		warn "Файл шрифта $file_font не найден!\n";
	}
	else
	{
		#	Установка шрифта
		$font = $pdf->font($file_font);
	}
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	TTF-шрифт
	return $font;
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Рисовать стрелку: https://metacpan.org/pod/PDF::API2::Content#PATH-CONSTRUCTION-(DRAWING)
	---
	_draw_arrow($gfx, $x, $y, $w, $h)
	
		$gfx	- объект для рисования графики
=cut
sub _draw_arrow
{
	#	объект для рисования графики
	my	$gfx = shift @_;
	#	область для рисования
	my	($x, $y, $w, $h) = @_;
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	Толщина линии
	$gfx->linewidth(0.5);
	#	Цвет линии
	$gfx->strokecolor('black');
	#	цвет заливки
	$gfx->fill_color('#FFCCCC');
	#	стиль соединения, который будет использоваться на углах пути
	$gfx->line_join('round');
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	$x -= 12;
	$y += 4;
	$h -= 8;
	#
	#	начало пути
	$gfx->move($x, $y + $h/2);
	#
	#	рисовать фигуру
	$gfx->line($x - $h/2, $y);
	$gfx->hline($x - 32);
	$gfx->vline($y + $h);
	$gfx->hline($x - $h/2);
	$gfx->close();
	#
	#	Заполнить и обвести текущий контур
	$gfx->paint;
	#
	#	Восстановить цвет
	$gfx->fill_color('black');
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Метка времени: https://perldoc.perl.org/functions/localtime
	---
	$date_time = time_stamp();
	
=cut
sub time_stamp
{
	#	Местное время
	my	($sec, $min, $hour, $mday, $mon, $year) = localtime;
	#
	#	Метка времени (DD-MM-YYYY hh:mm:ss)
	#
	return sprintf("%02d-%02d-%04d %02d:%02d:%02d",
			$mday, $mon+1, $year+1900,
			$hour, $min, $sec);
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Функция для добавления колонтитулов
	---
	$obj->page_header_footer();
	
=cut
sub page_header_footer {
	#	ссылка на объект
	my	$self = shift @_;
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	Метка времени (DD-MM-YYYY hh:mm:ss)
	my	$time_stamp = time_stamp();
	#
	#	Пользователь
	my	$user_info = sprintf 'Telegram id (%s)', $self->{-user}->{telegram_id};
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	PDF-документ
	my	$pdf = $self->{-pdf};
	#
	#	отступы от края страницы
	my	$margin = $self->{-page_margin};
	#
	#	количество страниц
	my	$total_pages = $pdf->page_count();
	#
	#	Создать SVG-объект
	my	$svg = SVGPDF->new($pdf);
	#
	#	Ссылка на массив, содержащий хэши, описывающие объекты XObject
	#	https://metacpan.org/pod/SVGPDF#OUTPUT
	my	$xof = $svg->process(\$SVG_string);
	#
	#	координаты на странице
	my	($x, $y);
	#
	#	цикл по номерам страниц
	for (my $i = 1; $i <= $total_pages; $i++)
	{
		#	Открыть страницу
		my	$page = $pdf->open_page($i);
		#
		#	SVG-область
		{
			#	графический объект
			my	$gfx = $page->gfx;
			#
			#	Левый верхний угол положения на странице
			my	$x = $margin->{-left};
			my	$y = $self->{-page_height};
			#
			#	цикл по списку XObject's
			foreach (@$xof)
			{
				#	XObject
				my $xo = $_->{xo};
				#
				#	https://metacpan.org/pod/SVGPDF#OUTPUT
				my	@bb = $xo->bbox;
				#
				#	Высота XObject, указанная в элементе SVG или полученная из его viewBox
				my	$h = $bb[3];
				#
				#	Добавить графический объект
				$gfx->object($xo, $x, $y - $h - 10);
				#
				#	увеличение отступа от верхнего края страницы
				$y -= $h;
			}
		}
		#
		#	Новый объект-текст
		my	$text = $page->text();
		#
		#	Шрифт
			$text->font($self->{-font}, 10);
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		#	Верхний колонтитул (header)
=pod
		#
		#	Дата + Время
		my	$text_width = $text->text_width($time_stamp);
		#
		#	Вычисляем позицию (x,y) для выравнивания по правому краю
			$x = $self->{-page_width} - $text_width - $margin->{-right};
			$y = $self->{-page_height} - $margin->{-top} + 10;
		#
		#	позиция текста
			$text->translate($x, $y);
			$text->text($time_stamp);
=cut			
		#
		#	Положение текста (верхний левый угол)
		{
			#	ширина
			my	$width = ($self->{-page_width} - $margin->{-left} - $margin->{-right})*3/4;
			#
			#	координаты (x,y)
			my	$x = $self->{-page_width} - $margin->{-right};
			my	$y = $self->{-page_height} - 22;
			#
			#	Положение текста
				$text->translate($x, $y);
			#
			#	Добавить параграф
			#	https://metacpan.org/pod/PDF::API2::Content#paragraph
				$text->paragraph(Encode::decode('windows-1251', sprintf(
					"Электронный ассистент врача-ревматолога\n".
					"по выбору генно-инженерной и таргетной терапии\n%s",
					$time_stamp)),
					$width, $margin->{-top},
					align => 'right');
		}
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		#	Нижний колонтитул (footer)
			$text->translate($margin->{-left}, 0.5*$margin->{-bottom});
			$text->text($user_info);
		#
		#	номер страницы
		my	$footer = Encode::decode('windows-1251', "Страница $i из $total_pages");
		#
		#	Вычисляем позицию 'x' для выравнивания по правому краю
			$x = $self->{-page_width} - $text->text_width($footer) - $margin->{-right};
		#
		#	позиция текста
			$text->translate($x, 0.5*$margin->{-bottom});
			$text->text($footer);
	}
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	ссылка на объект
	return $self;
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Добавить пустую страницу
	---
	$obj->add_page();
	
=cut
sub add_page
{
	#	ссылка на объект
	my	$self = shift @_;
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	Добавить пустую страницу
	$self->{-pdf}->page();
	#
	#	Отступ от верхнего края страницы
	$self->{-current_y} = $self->{-page_height} - 1*$self->{-page_margin}->{-top};
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	ссылка на объект
	return $self;
}	
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Добавить текст
	---
	$obj->add_text($string, %settings);
	
		$string		- строка текста
		%settings	- параметры текста
=cut
sub add_text
{
	#	ссылка на объект
	my	$self = shift @_;
	#	строка текста
	my	$string = shift @_;
	#-------------------------------------------------------------------------
	#	размеры страницы (ширина, высота)
	my	$page_width = $self->{-page_width};
	my	$page_height = $self->{-page_height};
	#
	#	отступы от краёв страницы
	my	$margin = $self->{-page_margin};
	#-------------------------------------------------------------------------
	#	параметры текста
	my	%settings = (
			font 		=> $self->{-font},
			font_size	=> 12,
			x         	=> $margin->{-left},
			y			=> $self->{-current_y},
			fill_color	=> 'black',
	, @_);
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	Ширина текста (до правого края страницы)
	my	$width = $page_width - $settings{x} - $margin->{-right};
	#
	#	Высота текста (до нижнего края страницы)
	my	$height = $settings{y} - $margin->{-bottom};
	#
	#	Открыть страницу с номером 'page_number'
	#	https://metacpan.org/pod/PDF::API2#open_page
	my	$page = $self->{-pdf}->open_page(0);
	#
	#	Получаем объект текстового содержимого страницы
	my	$text = $page->text();
	#
	#	Устанавливаем шрифт и размер
		$text->font($settings{font}, $settings{font_size});
	#
	#	Цвет текста
		$text->fill_color($settings{fill_color});
	#
	#	Положение текста (верхний левый угол)
		$text->translate($settings{x}, $settings{y});
	#
	#	Добавить параграф
	#	https://metacpan.org/pod/PDF::API2::Content#paragraph
	my	($overflow, $last_height) = $text->paragraph($string, $width, $height);
	#
	#	Увеличить отступ от верхнего края страницы
		$self->{-current_y} -= $height - $last_height;
	#
	#	Цвет текста (по умолчанию)
		$text->fill_color('black');
#	print STDERR "$overflow, $last_height\n";
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Создать таблицу
	---
	$obj->add_table($data, %settings);
	
		$data		- ссылка на матрицу данных [[row-1],[row-2], ...]
		%settings	- параметры таблицы
=cut
sub add_table
{
	#	ссылка на объект
	my	$self = shift @_;
	#	данные таблицы
	my	$data = shift @_;
	#	опции таблицы: https://metacpan.org/pod/PDF::Table#Table-settings
	my	%settings = (
			header_props => # Заголовок таблицы
			{
				font 			=> $self->{-font_bold},
				font_size		=> 12,
				font_color		=> 'black',
#				bg_color		=> '#D4EBF2',
				bg_color		=> '#f8f4e8',
				valign			=> 'middle',
				padding_top		=> 7,
				padding_bottom	=> 7,
				repeat			=> 1,    # 1/0 eq On/Off  if the header row should be repeated to every new page
			},
			font 		=> $self->{-font},
			font_size	=> 12,
			padding   	=> 5,
			size		=> '8cm 1*',
			border_w	=> 0.5,
		, @_);
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	размеры страницы (ширина, высота)
	my	$page_width = $self->{-page_width};
	my	$page_height = $self->{-page_height};
	#
	#	отступы от краёв страницы
	my	$margin = $self->{-page_margin};
	#
	#	?!? Проверка доступного высоты таблицы
	if ($self->{-current_y} <= 1.5*72)
	{
		#	добавить пустую страницу
		$self->add_page();
	};
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	опции таблицы: https://metacpan.org/pod/PDF::Table#Table-settings
	%settings = (%settings,
		x         	=> $margin->{-left},
		w         	=> $page_width - $margin->{-left} - $margin->{-right},
		y			=> $self->{-current_y},
		next_y		=> $page_height - $margin->{-top},
		next_h		=> $page_height - $margin->{-top} - $margin->{-bottom},
	);
	#	Высота таблицы (до конца страницы)
		$settings{h} = $settings{y} - $margin->{-bottom};
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	Копия данных таблицы
	my	$copy_data;
	#
	#	Декодирование данных (из UTF-8)
	foreach my $i (0 .. $#{ $data })
	{
		foreach my $j (0 .. $#{ $data->[$i] })
		{
#			$copy_data->[$i]->[$j] = Encode::decode('UTF-8', $data->[$i]->[$j] || '');
			$copy_data->[$i]->[$j] = $data->[$i]->[$j] || '';
		}
	}
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	PDF-документ
	my	$pdf = $self->{-pdf};
	#
	#	Открыть страницу с номером 'page_number'
	#	https://metacpan.org/pod/PDF::API2#open_page
	my	$page = $pdf->open_page(0);
	#
	#	Создать объект-таблицу
	my	$table = PDF::Table->new();
	#
	#	Сгенерировать таблицу
	#	https://metacpan.org/pod/PDF::Table#table()
	#
	my	($final_page, $number_of_pages, $final_y) = $table->table(
			$pdf,			# ссылка на объект
			$page,			# страница
			$copy_data,		# данные таблицы
			%settings,		# опции таблицы
		);
	#
	#	Отступ от верхнего края страницы
		$self->{-current_y} = $final_y;
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	ссылка на объект
	return $self;
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Данные запроса пользователя
	---
	$obj->make_request();
	
=cut
sub make_request
{
	#	ссылка на объект
	my	$self = shift @_;
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	Запрос к базе данных
	my	$data_query = $self->{-DB}->request();
	#
	#	Добавить пустую страницу
		$self->add_page();
	#
	#	увеличить отступ от верхнего края страницы	
		$self->{-current_y} -= 12;
	#
	#	Заголовок
		$self->add_text(
			Encode::decode('windows-1251', 'Данные запроса'),
			font => $self->{-font_bold}, font_size => 14);
	#
	#	Таблица
		$self->add_table([
			[
				Encode::decode('windows-1251', 'Пользователь:'),
				$self->{-user}->{user_name},
			],[
				Encode::decode('windows-1251', 'Организация:'),
				$self->{-user}->{organization},
			]],
			#	Заголовок таблицы
			header_props =>
			{
				font_color	=> 'black',
				bg_color	=> 'white',
			},
			#	Свойства столбцов
			column_props	=> [
				{},
				{font => $self->{-font_bold}},
			],
			size			=> '3.2cm 1*',
			border_w		=> 0,
			padding			=> 4,
			padding_top		=> 0,
			padding_left	=> 0,
		);
	#
	#	увеличить отступ от верхнего края страницы	
		$self->{-current_y} -= 12;
=pod	
		$self->add_text(
				Encode::decode('windows-1251', 'Запрос пользователя ').
				$self->{-user}->{user_name} . "\n".
				Encode::decode('windows-1251', 'Организация: ').
				$self->{-user}->{organization}
			,
			font => $self->{-font_bold}, font_size => 14);
=cut
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	цикл по секциям запроса
	foreach my $name ('rheumatology', 'comorbidity', 'status', 'manual', 'probe', 'preparation')
	{
		#	нет выбранных данных
		next if scalar @{ $data_query->{$name} } < 2;
		#
		#	размеры колонок таблицы
		my	$column_size = ($name eq 'probe') ? '8cm 3cm 1*' : '8cm 1*';
		#
		#	добавить таблицу
		$self->add_table($data_query->{$name}, size => $column_size);
	}
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	ссылка на объект
	return $self;
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Список препаратов рекомендуемых к применению
	---
	$obj->make_report();
	
=cut
sub make_report
{
	#	ссылка на объект
	my	$self = shift @_;
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#
	#	(II) СПИСОК ПРЕПАРАТОВ РЕКОМЕНДУЕМЫХ К ПРИМЕНЕНИЮ
	#
	my	$data_report = $self->{-DB}->report();
	#
	#	Добавить пустую страницу
		$self->add_page();
	#
	#	увеличить отступ от верхнего края страницы	
		$self->{-current_y} -= 12;
	#
	#	нет рекомендаций?
	if (!defined $data_report)
	{
		#	вставить текст
		$self->add_text(
			Encode::decode('windows-1251',
			'Для заданных условий поиска нет рекомендуемых препаратов'),
			y			=> $self->{-current_y} - 24,
			font		=> $self->{-font_bold},
			font_size	=> 14,
			fill_color	=> 'red',
		);
		#	возврат из функции
		return $self;
	}
	#
	#	Заголовок раздела
		$self->add_text(Encode::decode('windows-1251',
			'Список препаратов рекомендуемых к применению'),
			font => $self->{-font_bold}, font_size => 14);
	#
	#	Заголовок таблицы 'Лабораторные исследования'
	my	@probe_title = map { Encode::decode('windows-1251', $_) }
		('Показатель', 'от', 'факт', 'до', 'Рекомендации');
	#
	#	цикл по выбранным препаратам
	for (my $i = 0; $i < scalar @{ $data_report->{-preparation} }; $i++)
	{
		#	добавить таблицу
		$self->add_table($data_report->{-preparation}->[$i], size => '5cm 1*');
		#
		#	Лабораторные исследования
		if (defined $data_report->{-probe}->[$i])
		{
			#	Заголовок таблицы
			unshift @{ $data_report->{-probe}->[$i] }, \@probe_title;
			#
			#	Ссылка на данные
			my	$data = $data_report->{-probe}->[$i];
			#
			#	Подсветка ячеек
			my	$cell_props = [];
			foreach my $row (1 .. $#{ $data})
			{
				#	нет значения?
				next if $data->[$row]->[2] eq '';
				#
				#	цвет ячеек
				$cell_props->[$row] =
				[
					{bg_color => '#FFCCCC'},
					{},
					{bg_color => '#FFCCCC'},
					{},
					{bg_color => '#FFCCCC'},
				];
			}
			#
			#	Добавить таблицу
			$self->add_table($data_report->{-probe}->[$i],
				size			=> '5cm 2cm 2cm 2cm 1*',
				header_props	=>
				{
					font		=> $self->{-font_italic},
					font_size	=> 12,
					repeat		=> 1,
				},
				#	
				'cell_render_hook'  => sub
				{
					#	параметры вызова функции
					my	($page, $first_row, $row, $col, $x, $y, $w, $h) = @_;
					#
					#	Do nothing except for first column (and not a header row)
					return if ($first_row) or ($col != 0) or ($data->[$row]->[2] eq '');
					#
					#	Рисования графики
					_draw_arrow($page->gfx, $x, $y, $w, $h)
				},
				'cell_props' => $cell_props,
			);
		}
		#
		#	Увеличить отступ от верхнего края страницы
		$self->{-current_y} -= $self->{-skip_y};
	}
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	ссылка на объект
	return $self;
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
=pod
	Сохранить файл
	---
	$obj->save( $pdf_file_name );
	
		$pdf_file_name	- имя PDF-файла

=cut
sub save
{
	#	ссылка на объект
	my	$self = shift @_;
	#	имя PDF-файла
	my	$pdf_file_name = shift @_;
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#
	#	(I) ДАННЫЕ ЗАПРОСА ПОЛЬЗОВАТЕЛЯ
	#
		$self->make_request();
	#
	#	(II) СПИСОК ПРЕПАРАТОВ РЕКОМЕНДУЕМЫХ К ПРИМЕНЕНИЮ
	#
		$self->make_report();
	#
	#	Колонтитулы на странице
		$self->page_header_footer();
	#
	#	Сохранить файл
		$self->{-pdf}->saveas($pdf_file_name);
	#
	#	вывод на экран
	print STDERR "Create file '$pdf_file_name'\n";
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#	ссылка на объект
	return $self;
}
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
} ### end of package
return 1;
__DATA__
