<!DOCTYPE html>
<html lang="ru-RU">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Электронный ассистент</title>
<!--meta http-equiv="content-type" content="text/html; charset=utf-8"/-->
<link href="med.css" rel="stylesheet" type="text/css"/>
<!-- Google font's -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Ubuntu:wght@300;400;500&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
<!--
	https://core.telegram.org/bots/webapps#initializing-mini-apps
-->
<script src="https://telegram.org/js/telegram-web-app.js?59"></script>

<style>
/*	Скрыть вкладки, радиокнопки и кнопки навигации */
div.tab-content, input[type=radio]
{
	display: none;
}
/*	Подсветка выбора пользователя */
#radio-rheumatology:checked ~	#userDialog #label-rheumatology,
#radio-preparation:checked ~	#userDialog #label-preparation,
#radio-comorbidity:checked ~ 	#userDialog #label-comorbidity,
#radio-status:checked ~ 		#userDialog #label-status,
#radio-deviation:checked ~ 		#userDialog #label-deviation,
#radio-probe:checked ~ 			#userDialog #label-probe,
#radio-prescription:checked ~ 	#userDialog #label-prescription
{
	0background-color:	hsl(215,75%,90%);
	color:				var(--tg-theme-button-text-color, yellow);
	background-color:	var(--tg-theme-button-color, green);
}
/*	Показать содержимое вкладок */
#radio-rheumatology:checked ~	#req-form #rheumatology,
#radio-preparation:checked ~	#req-form #preparation,
#radio-comorbidity:checked ~ 	#req-form #comorbidity,
#radio-status:checked ~ 		#req-form #status,
#radio-deviation:checked ~ 		#req-form #deviation,
#radio-probe:checked ~ 			#req-form #probe,
#radio-prescription:checked ~ 	#req-form #report
{
	display: block;
}
</style>
</head>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	ОСНОВНОЕ СОДЕРЖАНИЕ

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<body>
<!--
	Радиокнопки меню
-->
	<input type="radio" id="radio-rheumatology"	name="tab-group" checked>
	<input type="radio" id="radio-preparation"	name="tab-group">
	<input type="radio" id="radio-comorbidity"	name="tab-group">
	<input type="radio" id="radio-status"		name="tab-group">
	<input type="radio" id="radio-deviation"	name="tab-group">
	<input type="radio" id="radio-probe"		name="tab-group">
	<input type="radio" id="radio-prescription"	name="tab-group">
<!--
	Меню
-->
<div id="showMenu" class="header-fixed">
	<div class="title-icon">rheumatology</div>
	<div class="title-text">Основное заболевание</div>
</div>
<!--
	Диалоговое окно
-->
<dialog id="userDialog">
	<!-- :: ВЫБОР ОПЦИЙ :: -------------------------------------------------------->
	<div class="menu">
		<!-- Заболевания -->
		<label id="label-rheumatology" for="radio-rheumatology">
			<span>rheumatology</span><div>Основное заболевание</div></label>

		<!-- Сопутствующие заболевания -->
		<label id="label-comorbidity" for="radio-comorbidity">
			<span>person_cancel</span><div>Сопутствующие заболевания</div></label>
	
		<!-- Сопутствующие состояния -->
		<label id="label-status" for="radio-status">
			<span>person_alert</span><div>Сопутствующие состояния</div></label>

		<!-- Сопутствующие отклонения -->
		<label id="label-deviation" for="radio-deviation">
			<span>instant_mix</span><div>Лабораторные показатели</div></label>
		
		<!-- Лабораторные показатели -->
		<label id="label-probe" for="radio-probe">
			<span>biotech</span><div>Лабораторные исследования</div></label>

		<!-- Препараты -->
		<label id="label-preparation" for="radio-preparation">
			<span>pill</span><div>Препараты</div></label>
	</div>
</dialog>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	Основное заболевание

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<form id="req-form">
<div id="rheumatology" class="tab-content">
##--RHEUMATOLOGY--##
</div>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	Сопутствующие заболевания

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<div id="comorbidity" class="tab-content">
##--COMORBIDITY--##
</div>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	Сопутствующие состояния

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<div id="status" class="tab-content">
##--STATUS--##
</div>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	Лабораторные показатели (выбор из списка)

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<div id="deviation" class="tab-content">
##--PROBE-MANUAL--##
</div>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	Лабораторные исследования

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<div id="probe" class="tab-content">
##--PROBE--##
</div>
<!--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	Препараты

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
<div id="preparation" class="tab-content">
##--PREPARATION--##
</div>
</form>
<!--##########################################################################

	Telegram Web API
	https://core.telegram.org/bots/webapps#events-available-for-mini-apps

###########################################################################-->
<script>
	//	Web-API
	let tg = window.Telegram.WebApp;
	//	Инициализируем WebApp
		tg.ready();
	//	во весь экран
		tg.expand();
	//	Получаем информацию о пользователе
	const user = tg.initDataUnsafe.user;
	//	Наименования секций (разделов) HTML-страницы
	const section = ["rheumatology","preparation","comorbidity","status","manual"];
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//
	//	Главная кнопка
	//
	tg.MainButton.setText("Рекомендации").show();
	//	Add an event listener for when the SettingButton is clicked
	tg.onEvent('mainButtonClicked', () => {
		//
		//	Данные для отправки в Telegram Bot
		let dataToSend = {};
		//
		//	Цикл по названию секций, содержащих флажки (checkbox)
		for (let i = 0; i < section.length; i++) {
			//
			//	Селекторы: https://learn.javascript.ru/css-selectors
			//
			let elem = document.querySelectorAll("input[name^='" + section[i] + "#']");
			//
			//	Массив ID значений флажков (checkbox)
			let id = [];
			//
			//	цикл по всем элементам списка
			for (let j = 0; j < elem.length; j++) {
				//
				//	Пропустить оставшуюся часть тела цикла
				if (elem[j].checked === false) continue;
				//
				//	Добавить в массив
				id.push(elem[j].name.split("#")[1]);
			}
			//	Список ID флажков
			dataToSend[section[i]] = id;
		}
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		//	Коллекция полей ввода (input)
		//	Селекторы: https://learn.javascript.ru/css-selectors
		let elem = document.querySelectorAll("input[name^='probe#']");
		//
		//	Массив объектов (полей ввода)
		let probe = [];
		//
		//	цикл по всем элементам списка
		for (let j = 0; j < elem.length; j++) {
			//
			//	Пропустить оставшуюся часть тела цикла
			if (elem[j].value == "") continue;
			//
			//	Добавить в массив
			probe.push(
			{
				id:		elem[j].name.split("#")[1],
				val:	elem[j].value
			});
		}
		//	Список объектов
		dataToSend["probe"] = probe;
		//
		//	Преобразуем массив объектов в строку JSON
		const jsonString = JSON.stringify(dataToSend);
		
		alert("Main button clicked!\nКоличество символов: " + jsonString.length);
		//
		// Send the data to the bot
		tg.sendData(jsonString);
		//
		// You can also send data back to the bot here
		// tg.sendData(JSON.stringify({ action: 'secondary_button_pressed' }));
	});
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//
	//	Вторичная кнопка
	//	https://www.google.com/search?q=telegram+WebApp+secondaryButton+example+js+code&oq=telegram+WebApp+secondaryButton+example+js+code
	//	tg.SecondaryButton.setText("Назад").show();
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//
	//	Кнопка "Установки"
	tg.SettingsButton.show();
	//	Add an event listener for when the SettingButton is clicked
	tg.onEvent('settingsButtonClicked', () => {
		alert('Setting button clicked!');
		// You can also send data back to the bot here
		// tg.sendData(JSON.stringify({ action: 'secondary_button_pressed' }));
	});	
</script>
<!--##########################################################################

	Хранилище устройства (DeviceStorage)
	https://core.telegram.org/bots/webapps#devicestorage

###########################################################################-->
<script>
	//	Локальное хранилище данных
	let ds = tg.DeviceStorage;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//	Цикл по названию секций, содержащих checkbox
	for (let i = 0; i < section.length; i++) {
		//
		//	Коллекция флажков в секции:	https://learn.javascript.ru/css-selectors
		let elem = document.querySelectorAll("input[name^='" + section[i] + "#']");
		//
		//	Цикл по всем флажкам (checkbox) из секции
		for (let j = 0; j < elem.length; j++) {
			//
			//	Восстановить значение флажка
			ds.getItem(JSON.stringify(elem[j].name), (error, result) => {
				//
				//	Нет информации в хранилище?
				if (result !== null) {
					//
					//	Присвоить значение флажку
					elem[j].checked = JSON.parse(result);
				}
				else {
					elem[j].checked = false;
				}
			});
			//
			//	Обработчик событий для каждого флажка
			elem[j].addEventListener('click', function(event) {
				//
				//	Записать в хранилище устройства
				ds.setItem(
					JSON.stringify(elem[j].name),
					JSON.stringify(elem[j].checked));
			});
		}
	};
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//	Коллекция строк полей ввода (input)
	//	https://learn.javascript.ru/css-selectors
	let probe = document.querySelectorAll("input[name^='probe#']");
	//
	//	Цикл по всем полям ввода
	for (let j = 0; j < probe.length; j++) {
		//
		//	Восстановить значение поля ввода
		ds.getItem(JSON.stringify(probe[j].name), (error, result) => {
			//
			//	нет записи в хранилище?
			if (result !== null) {
				//
				//	Присвоить значение
				probe[j].value = JSON.parse(result);
			}
			else {
				probe[j].value = "";
			}
		});
		//
		//	Обработчик событий для каждого поля ввода
		probe[j].addEventListener('change', function(event) {
			//
			//	Записать в хранилище устройства
			ds.setItem(
				JSON.stringify(probe[j].name),
				JSON.stringify(probe[j].value));
		});
	};
</script>
<!--##########################################################################

	Окно диалога (меню выбора вкладки)
	https://developer.mozilla.org/ru/docs/Web/HTML/Reference/Elements/dialog

###########################################################################-->
<script>
	const showMenu = document.getElementById("showMenu");
	const userDialog = document.getElementById("userDialog");
	const itemMenu = userDialog.querySelectorAll("label");
	//
	// "Show the dialog" button opens the <dialog> modally
	showMenu.addEventListener("click", () => {
		//
		//	Показать окно
		userDialog.showModal();
		//
		//	Скрыть Главную кнопку
		tg.MainButton.hide();
	});
	//
	//	цикл по всем пунктам меню
	for (let i = 0; i < itemMenu.length; i++) {
		//
		// Добавляем прослушиватель для закрытия при клике
		itemMenu[i].addEventListener("click", () => {
			//
			//	Закрываем диалог
			userDialog.close();
			//
			//	Изменить значок
			showMenu.querySelector(".title-icon").textContent =
				itemMenu[i].querySelector("span").textContent;
			//
			//	Изменить название
			showMenu.querySelector(".title-text").textContent =
				itemMenu[i].querySelector("div").textContent;
			//
			//	Показать Главную кнопку
			tg.MainButton.show();
		});
	}
	// Добавляем прослушиватель для закрытия при клике вне диалога
	document.addEventListener('click', function(event) {
//		alert("Ok");
		console.log(userDialog.open);
		// Проверяем, кликнули ли по самому диалогу или его содержимому
		if (!userDialog.contains(event.target) && userDialog.open) {
//			userDialog.close(); // Закрываем диалог
		}
	});
</script>
</body>
</html>

<!--

// Получаем ссылку на форму
const formElement = document.getElementById('myForm');
const elements = formElement.elements; // Получаем все элементы формы

let formDataArray = [];
for (let i = 0; i < elements.length; i++) {
  let element = elements[i];
  // Игнорируем кнопки отправки, чтобы не включать их в JSON
  if (element.type !== 'submit' && element.type !== 'button') {
    formDataArray.push({
      name: element.name,
      value: element.value,
      type: element.type
    });
  }
}

// Преобразуем массив объектов в строку JSON
const jsonString = JSON.stringify(formDataArray);

console.log(jsonString);

-->